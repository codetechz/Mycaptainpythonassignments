# -*- coding: utf-8 -*-
"""ImgClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1syRxvBNqAgAlgB7wWzeel8T6k9bAFkDJ
"""

#Importing Packages
import tensorflow as tf
import keras
from keras.models import Sequential
from keras.layers import Dense,Dropout,Flatten
#Droput- to help prevent overfitting, Flatten-converts data into 1-D array to fed to the next layer
from keras.layers import Conv2D,MaxPooling2D
from keras import backend as k
from keras.models import load_model
import numpy as np
import matplotlib.pyplot as plt

#Loading and Splitting Dataset
from keras.datasets import mnist
(X_train,y_train),(X_test,y_test)=mnist.load_data()

print(X_train.shape,y_train.shape)

X_train=X_train.reshape(X_train.shape[0],28,28,1)
X_test=X_test.reshape(X_test.shape[0],28,28,1)
input_shape=(28,28,1)

#converting the class vector to binary class metrics
num_classes=10
y_train=keras.utils.to_categorical(y_train,num_classes)
y_test=keras.utils.to_categorical(y_test,num_classes)
#It has number of rows equal to the length of the input vector and number of columns equal to the number of classes

X_train=X_train.astype('float32')
X_test=X_test.astype('float32')

#Normalizing the data
X_train=X_train/255
X_test=X_test/255

print('X_train.shape',X_train.shape)
print(X_train.shape[0],'Train sample')
print(X_test.shape[0],'Test sample')

#Creating the model
model=Sequential()
model.add(Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=input_shape))
model.add(Conv2D(64,(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(256,activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes,activation='softmax'))
#softmax- transforms the raw outputs of the neural network into a vector of probabilities
#relu-a piecewise linear function that will output the input directly if it is positive, otherwise, it will output zero

#Compiling the model
model.compile(loss=keras.losses.categorical_crossentropy,optimizer=keras.optimizers.Adadelta(),metrics=['accuracy'])

model.fit(X_train,y_train,batch_size=128,epochs=10,verbose=1,validation_data=(X_test,y_test))

#Model Evaluating
score=model.evaluate(X_test,y_test,verbose=2)
print('test lose',score[0])
print('test accuracy',score[1])

#Saving the model
model.save('mnist.model')

#Prediction
new_model=load_model('mnist.model')

prediction=new_model.predict(X_test)

print(prediction)

print(np.argmax(prediction[5])) # returns indices of the max element of the array in a particular axis

plt.imshow((tf.squeeze(X_test[5])))
plt.show()

#Prediction on the first five images
pred=model.predict(X_test[:5])
print(np.argmax(pred,axis=1))
print(y_test[:5])

for i in range(0,5):
  first_img=X_test[i]
  first_img=np.array(first_img,dtype='float')
  pixels=first_img.reshape((28,28))
  plt.imshow(pixels,cmap='gray')
  plt.show()